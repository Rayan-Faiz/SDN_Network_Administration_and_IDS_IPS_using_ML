from ryu.base import app_manager
from ryu.controller import ofp_event
from ryu.controller.handler import CONFIG_DISPATCHER, MAIN_DISPATCHER
from ryu.controller.handler import set_ev_cls
from ryu.ofproto import ofproto_v1_3
from ryu.lib.packet import packet
from ryu.lib.packet import ethernet
from ryu.lib.packet import ether_types
from ryu.lib.packet import ipv4

from flask import Flask, request, jsonify, send_from_directory
import threading

class SimpleSwitch13(app_manager.RyuApp):
    OFP_VERSIONS = [ofproto_v1_3.OFP_VERSION]

    def __init__(self, *args, **kwargs):
        super(SimpleSwitch13, self).__init__(*args, **kwargs)
        self.mac_to_port = {}
        self.blocked_macs = set()
        self.blocked_ips = set()
        self.datapaths = {}  # Store all connected datapaths

        # Start Flask API in a separate thread
        self.app = Flask(__name__, static_folder='static')
        self.app.add_url_rule('/block_mac', 'block_mac', self.block_host, methods=['POST'])
        self.app.add_url_rule('/unblock_mac', 'unblock_mac', self.unblock_host, methods=['POST'])
        self.app.add_url_rule('/block_ip', 'block_ip', self.block_ip, methods=['POST'])
        self.app.add_url_rule('/unblock_ip', 'unblock_ip', self.unblock_ip, methods=['POST'])
        self.app.add_url_rule('/blocked_macs', 'blocked_macs', self.list_blocked_macs, methods=['GET'])
        self.app.add_url_rule('/blocked_ips', 'blocked_ips', self.list_blocked_ips, methods=['GET'])
        self.app.add_url_rule('/', 'index', self.serve_index)
        threading.Thread(target=self.app.run, kwargs={'port': 5000}).start()
    
    def serve_index(self):
        return send_from_directory('static', 'index.html')

    def block_host(self):
        data = request.get_json()
        host_mac = data.get('mac')
        if host_mac:import paramiko
import scp
import pyshark
import csv
import time

# Define your SSH and tcpdump parameters
remote_host = '172.16.158.137'
remote_user = 'mininet'
remote_password = 'mininet'
remote_pcap_file = '/home/mininet/capture.pcap'  # Use a directory with write permissions
local_pcap_file = 'capture.pcap'
#capture_interface = 'eth0'
packet_count = 500

# Function to execute a remote command over SSH
def execute_ssh_command(ssh, command):
    stdin, stdout, stderr = ssh.exec_command(command)
    stdout.channel.recv_exit_status()  # Wait for the command to finish
    return stdout.read().decode(), stderr.read().decode()

# SSH into the remote machine and run tcpdump
ssh = paramiko.SSHClient()
ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
ssh.connect(remote_host, username=remote_user, password=remote_password)

# Run tcpdump command on the remote machine with sudo
tcpdump_command = f'sudo tcpdump -i any -c {packet_count} -w {remote_pcap_file}'
output, errors = execute_ssh_command(ssh, tcpdump_command)

# Print the output and errors for debugging
print(f"Output: {output}")
print(f"Errors: {errors}")

# Check if the file exists on the remote machine
output, errors = execute_ssh_command(ssh, f'ls {remote_pcap_file}')
file_exists = len(errors) == 0

if not file_exists:
    print("Error: The pcap file was not created.")
    ssh.close()
    exit(1)

# Use SCP to transfer the file to the local machine
scp_client = scp.SCPClient(ssh.get_transport())
scp_client.get(remote_pcap_file, local_pcap_file)

# Delete the remote pcap file
execute_ssh_command(ssh, f'rm {remote_pcap_file}')

# Close the SCP and SSH connections
scp_client.close()
ssh.close()

# Load the pcap file using pyshark
cap = pyshark.FileCapture(local_pcap_file)

# Define the CSV file path
csv_file = 'capture.csv'

# Get all field names dynamically
fieldnames = set()
for packet in cap:
    for layer in packet.layers:
        for field in layer.field_names:
            fieldnames.add(field)

# Open the CSV file for writing
with open(csv_file, mode='w', newline='') as file:
    csv_writer = csv.writer(file)
    
    # Write the header row
    csv_writer.writerow(['No.', 'Time'] + sorted(fieldnames))
    
    # Write packet data
    for i, packet in enumerate(cap):
        row = [i + 1, packet.sniff_time]
        packet_fields = {field: '' for field in fieldnames}
        
        for layer in packet.layers:
            for field in layer.field_names:
                packet_fields[field] = getattr(layer, field, '')

        row.extend([packet_fields[field] for field in sorted(fieldnames)])
        csv_writer.writerow(row)

print(f'PCAP file has been converted to CSV: {csv_file}')

            self.blocked_macs.add(host_mac)
            self.logger.info("Blocking host with MAC: %s", host_mac)
            # Install blocking flows on all datapaths
            for datapath in self.datapaths.values():
                self.block_flows(datapath, host_mac)
            return jsonify({'status': 'success', 'mac': host_mac}), 200
        return jsonify({'status': 'error', 'message': 'MAC address not provided'}), 400

    def unblock_host(self):
        data = request.get_json()
        host_mac = data.get('mac')
        if host_mac and host_mac in self.blocked_macs:
            self.blocked_macs.remove(host_mac)
            self.logger.info("Unblocking host with MAC: %s", host_mac)
            # Remove blocking flows on all datapaths
            for datapath in self.datapaths.values():
                self.unblock_flows(datapath, host_mac)
            return jsonify({'status': 'success', 'mac': host_mac}), 200
        return jsonify({'status': 'error', 'message': 'MAC address not found or not blocked'}), 400

    def block_ip(self):
        data = request.get_json()
        ip_address = data.get('ip')
        if ip_address:
            self.blocked_ips.add(ip_address)
            self.logger.info("Blocking IP: %s", ip_address)
            # Install blocking flows on all datapaths
            for datapath in self.datapaths.values():
                self.block_ip_flows(datapath, ip_address)
            return jsonify({'status': 'success', 'ip': ip_address}), 200
        return jsonify({'status': 'error', 'message': 'IP address not provided'}), 400

    def unblock_ip(self):
        data = request.get_json()
        ip_address = data.get('ip')
        if ip_address and ip_address in self.blocked_ips:
            self.blocked_ips.remove(ip_address)
            self.logger.info("Unblocking IP: %s", ip_address)
            # Remove blocking flows on all datapaths
            for datapath in self.datapaths.values():
                self.unblock_ip_flows(datapath, ip_address)
            return jsonify({'status': 'success', 'ip': ip_address}), 200
        return jsonify({'status': 'error', 'message': 'IP address not found or not blocked'}), 400

    def list_blocked_macs(self):
        return jsonify({'blocked_macs': list(self.blocked_macs)}), 200

    def list_blocked_ips(self):
        return jsonify({'blocked_ips': list(self.blocked_ips)}), 200

    @set_ev_cls(ofp_event.EventOFPSwitchFeatures, CONFIG_DISPATCHER)
    def switch_feature_handler(self, ev):
        datapath = ev.msg.datapath
        self.datapaths[datapath.id] = datapath
        self.logger.info("Switch connected: %016x", datapath.id)
        ofproto = datapath.ofproto
        parser = datapath.ofproto_parser

        match = parser.OFPMatch()
        actions = [parser.OFPActionOutput(ofproto.OFPP_CONTROLLER, ofproto.OFPCML_NO_BUFFER)]
        self.add_flow(datapath, 0, match, actions)

    @set_ev_cls(ofp_event.EventOFPStateChange, [MAIN_DISPATCHER, CONFIG_DISPATCHER])
    def _state_change_handler(self, ev):
        datapath = ev.datapath
        if ev.state == MAIN_DISPATCHER:
            if datapath.id not in self.datapaths:
                self.logger.info('Register datapath: %016x', datapath.id)
                self.datapaths[datapath.id] = datapath
        elif ev.state == CONFIG_DISPATCHER:
            if datapath.id in self.datapaths:
                self.logger.info('Unregister datapath: %016x', datapath.id)
                del self.datapaths[datapath.id]

    def add_flow(self, datapath, priority, match, actions, buffer_id=None):
        ofproto = datapath.ofproto
        parser = datapath.ofproto_parser

        inst = [parser.OFPInstructionActions(ofproto.OFPIT_APPLY_ACTIONS, actions)]
        if buffer_id:
            mod = parser.OFPFlowMod(
                datapath=datapath,
                buffer_id=buffer_id,
                priority=priority,
                match=match,
                instructions=inst,
                idle_timeout=0,
                hard_timeout=0
            )
        else:
            mod = parser.OFPFlowMod(
                datapath=datapath,
                priority=priority,
                match=match,
                instructions=inst,
                idle_timeout=0,
                hard_timeout=0
            )
        datapath.send_msg(mod)
        self.logger.info("Added flow: priority=%d, match=%s, actions=%s", priority, match, actions)

    def block_flows(self, datapath, mac):
        ofproto = datapath.ofproto
        parser = datapath.ofproto_parser
        
        # Block all packets from the blocked MAC address
        match = parser.OFPMatch(eth_src=mac)
        actions = []
        self.add_flow(datapath, 100, match, actions)
        
        # Block all packets to the blocked MAC address
        match = parser.OFPMatch(eth_dst=mac)
        actions = []
        self.add_flow(datapath, 100, match, actions)

    def unblock_flows(self, datapath, mac):
        ofproto = datapath.ofproto
        parser = datapath.ofproto_parser

        # Remove all flows from and to the MAC address
        match = parser.OFPMatch(eth_src=mac)
        mod = parser.OFPFlowMod(
            datapath=datapath, 
            command=ofproto.OFPFC_DELETE,
            out_port=ofproto.OFPP_ANY,
            out_group=ofproto.OFPG_ANY,
            match=match
        )
        datapath.send_msg(mod)
        
        match = parser.OFPMatch(eth_dst=mac)
        mod = parser.OFPFlowMod(
            datapath=datapath, 
            command=ofproto.OFPFC_DELETE,
            out_port=ofproto.OFPP_ANY,
            out_group=ofproto.OFPG_ANY,
            match=match
        )
        datapath.send_msg(mod)

    def block_ip_flows(self, datapath, ip):
        ofproto = datapath.ofproto
        parser = datapath.ofproto_parser
        
        # Block all packets from the blocked IP address
        match = parser.OFPMatch(eth_type=ether_types.ETH_TYPE_IP, ipv4_src=ip)
        actions = []
        self.add_flow(datapath, 100, match, actions)
        
        # Block all packets to the blocked IP address
        match = parser.OFPMatch(eth_type=ether_types.ETH_TYPE_IP, ipv4_dst=ip)
        actions = []
        self.add_flow(datapath, 100, match, actions)

    def unblock_ip_flows(self, datapath, ip):
        ofproto = datapath.ofproto
        parser = datapath.ofproto_parser

        # Remove all flows from and to the IP address
        match = parser.OFPMatch(eth_type=ether_types.ETH_TYPE_IP, ipv4_src=ip)
        mod = parser.OFPFlowMod(
            datapath=datapath, 
            command=ofproto.OFPFC_DELETE,
            out_port=ofproto.OFPP_ANY,
            out_group=ofproto.OFPG_ANY,
            match=match
        )
        datapath.send_msg(mod)
        
        match = parser.OFPMatch(eth_type=ether_types.ETH_TYPE_IP, ipv4_dst=ip)
        mod = parser.OFPFlowMod(
            datapath=datapath, 
            command=ofproto.OFPFC_DELETE,
            out_port=ofproto.OFPP_ANY,
            out_group=ofproto.OFPG_ANY,
            match=match
        )
        datapath.send_msg(mod)

    @set_ev_cls(ofp_event.EventOFPPacketIn, MAIN_DISPATCHER)
    def _packet_in_handler(self, ev):
        if ev.msg.msg_len < ev.msg.total_len:
            self.logger.debug("packet truncated: only %s of %s bytes", ev.msg.msg_len, ev.msg.total_len)
        msg = ev.msg
        datapath = msg.datapath
        ofproto = datapath.ofproto
        parser = datapath.ofproto_parser
        in_port = msg.match['in_port']

        pkt = packet.Packet(msg.data)
        eth = pkt.get_protocols(ethernet.ethernet)[0]
        ip = pkt.get_protocol(ipv4.ipv4)

        if eth.ethertype == ether_types.ETH_TYPE_LLDP:
            return

        dst = eth.dst
        src = eth.src

        # Check if either src or dst MAC address is in blocked hosts
        if src in self.blocked_macs or dst in self.blocked_macs:
            self.logger.info("Dropping packet from %s to %s as one of the MAC addresses is blocked", src, dst)
            return

        # Check if either src or dst IP address is in blocked IPs
        if ip and (ip.src in self.blocked_ips or ip.dst in self.blocked_ips):
            self.logger.info("Dropping packet from %s to %s as one of the IP addresses is blocked", ip.src, ip.dst)
            return

        dpid = datapath.id
        self.mac_to_port.setdefault(dpid, {})

        self.logger.info("packet in switch %s: %s -> %s (in_port: %s)", dpid, src, dst, in_port)

        # Learn a mac address to avoid FLOOD next time
        self.mac_to_port[dpid][src] = in_port

        if dst in self.mac_to_port[dpid]:
            out_port = self.mac_to_port[dpid][dst]
        else:
            out_port = ofproto.OFPP_FLOOD

        actions = [parser.OFPActionOutput(out_port)]

        # Log action taken
        '''if out_port != ofproto.OFPP_FLOOD:
            self.logger.info("Installing flow for %s -> %s on switch %s: out_port: %s", src, dst, dpid, out_port)
        else:
            self.logger.info("Flooding packet from %s to %s on switch %s", src, dst, dpid)'''

        # Install a flow to avoid packet_in next time
        if out_port != ofproto.OFPP_FLOOD:
            match = parser.OFPMatch(in_port=in_port, eth_dst=dst, eth_src=src)
            if msg.buffer_id != ofproto.OFP_NO_BUFFER:
                self.add_flow(datapath, 1, match, actions, msg.buffer_id)
                return
            else:
                self.add_flow(datapath, 1, match, actions)

        data = None
        if msg.buffer_id == ofproto.OFP_NO_BUFFER:
            data = msg.data

        out = parser.OFPPacketOut(datapath=datapath, buffer_id=msg.buffer_id, in_port=in_port, actions=actions, data=data)
        datapath.send_msg(out)

        # Log the packet forwarding details
        #self.logger.info("Forwarding packet from %s to %s on switch %s: in_port %s, out_port %s", src, dst, dpid, in_port, out_port)

